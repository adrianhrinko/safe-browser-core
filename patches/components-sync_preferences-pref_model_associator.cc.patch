diff --git a/components/sync_preferences/pref_model_associator.cc b/components/sync_preferences/pref_model_associator.cc
index e6ae5ba302aa2de5928909c5ce4d2ae11719b83a..24fbcbceda3421944c5f8ca5787791e4b711c5a8 100644
--- a/components/sync_preferences/pref_model_associator.cc
+++ b/components/sync_preferences/pref_model_associator.cc
@@ -109,7 +109,7 @@ void PrefModelAssociator::InitPrefAndAssociate(
     syncer::SyncChangeList* sync_changes) {
   const base::Value* user_pref_value =
       pref_service_->GetUserPrefValue(pref_name);
-  VLOG(1) << "Associating preference " << pref_name;
+  LOG(INFO) << "Associating preference: " << pref_name << " \n " << sync_pref.ToString();
 
   if (sync_pref.IsValid()) {
     const sync_pb::PreferenceSpecifics& preference = GetSpecifics(sync_pref);
@@ -125,7 +125,7 @@ void PrefModelAssociator::InitPrefAndAssociate(
         base::Value::ToUniquePtrValue(std::move(*parsed_json.value));
 
     if (user_pref_value) {
-      DVLOG(1) << "Found user pref value for " << pref_name;
+      LOG(INFO) << "Found user pref value for " << pref_name;
       // We have both server and local values. Merge them.
       std::unique_ptr<base::Value> new_value(
           MergePreference(pref_name, *user_pref_value, *sync_value));
@@ -152,6 +152,7 @@ void PrefModelAssociator::InitPrefAndAssociate(
             FROM_HERE, syncer::SyncChange::ACTION_UPDATE, sync_data));
       }
     } else if (!sync_value->is_none()) {
+      LOG(INFO) << "Only server value exists for " << pref_name;
       // Only a server value exists. Just set the local user value.
       SetPrefWithTypeCheck(pref_name, *sync_value);
     } else {
@@ -202,6 +203,8 @@ PrefModelAssociator::MergeDataAndStartSyncing(
   syncer::SyncChangeList new_changes;
   std::set<std::string> remaining_preferences = registered_preferences_;
 
+  LOG(INFO) << "Syncable preferences:";
+
   // Go through and check for all preferences we care about that sync already
   // knows about.
   for (auto sync_iter = initial_sync_data.begin();
@@ -224,6 +227,8 @@ PrefModelAssociator::MergeDataAndStartSyncing(
     InitPrefAndAssociate(*sync_iter, sync_pref_name, &new_changes);
   }
 
+  LOG(INFO) << "Other preferences:";
+
   // Go through and build sync data for any remaining preferences.
   for (auto pref_name_iter = remaining_preferences.begin();
        pref_name_iter != remaining_preferences.end(); ++pref_name_iter) {
